<!-- map_merge global-->

<launch>

<arg name="env_ns" default="Env_0" />
<arg name="width" default="256" />
<arg name="height" default="256" />
<arg name="mapping_delta" default="0.10" />
<arg name="n_agents" default="1" />
<arg name="x_origin" default="100" />
<arg name="y_origin" default="100" />
<arg name="start_rrt" default="false" />
<arg name="global_rrt" default="true" />
<arg name="opencv_rrt" default="false" />

<arg name="Geta" value="1.0"/>

<group ns="$(arg env_ns)">
  <!-- global_map merger -->
  <node pkg="pepper" type="global_map_merger.py" name="global_map_merger" respawn="true">
    <param name="bot_count" value="$(arg n_agents)"/>
    <param name="bot_ns" value="$(arg env_ns)/Agent_"/>
    <param name="merged_map_topic" value="global_map"/>
    <param name="global_frame" value="$(arg env_ns)/map"/>
    <param name="resolution" value="$(arg mapping_delta)"/>
    <param name="width" value="$(arg width)"/>
    <param name="height" value="$(arg height)"/>
    <param name="x_origin" value="$(arg x_origin)"/>
    <param name="y_origin" value="$(arg y_origin)"/>
  </node>
  
  <!-- occupancy_cells_counter -->
  <node pkg="pepper" type="occupancy_counter.py" name="occupancy_counter" respawn="true">
    <param name="map_topic" value="global_map" />
    <param name="occupancy_count_topic" value="occupancy_count" />
  </node>

  <!-- frontier_detector -->
  <!--node pkg="pepper" type="frontier_detector.py" name="frontier_detector" respawn="true">
    <param name="map_topic" value="global_map" />
    <param name="frontier_topic" value="frontier_map" />
  </node-->

  <group if="$(arg start_rrt)"> 
    <param name="namespace_init_count" value="0"/>
    <!-- rrt global nodes -->
    <node pkg="rrt_exploration" type="filter.py" name="filter" respawn="true">
      <param name="map_topic" value="global_map"/>
      <param name="info_radius" value="1.5"/> 
      <param name="costmap_clearing_threshold" value="70"/> 
      <param name="goals_topic" value="detected_points"/> 
      <param name="n_robots" value="$(arg n_agents)"/>
      <!-- param name="namespace_init_count" value="0"/ -->
      <param name="namespace" value="/$(arg env_ns)/Agent_"/>
      <param name="rate" value="100"/>
    </node>
    
    
    <node pkg="rrt_exploration" type="assigner.py" name="assigner" respawn="true">
      <param name="map_topic" value="global_map"/>
      <param name="global_frame" value="$(arg env_ns)/map"/>
      <param name="info_radius" value="1.5"/> 
      <param name="info_multiplier" value="15.0"/> 
      <param name="hysteresis_radius" value="10.0"/> 
      <param name="hysteresis_gain" value="1.2"/> 
      <param name="frontiers_topic" value="filtered_points"/> 
      <param name="n_robots" value="$(arg n_agents)"/>
      <!-- param name="namespace_init_count" value="0"/ -->
      <param name="namespace" value="/$(arg env_ns)/Agent_"/>
      <param name="delay_after_assignement" value="0.5"/>
      <param name="rate" value="100"/>
    </node>
    <!-- rrt_frontier_detector -->
    <group if="$(arg global_rrt)">
      <node pkg="rrt_exploration" type="global_rrt_detector" name="global_rrt_detector" respawn="true">
        <param name="eta" value="$(arg Geta)"/>
        <param name="map_topic" value="global_map"/>
        <remap from="/clicked_point" to="/$(arg env_ns)/clicked_point"/>
        <remap from="/detected_points" to="/$(arg env_ns)/detected_points"/>
      </node>
    </group>
    <!-- opencv_frontier_detector -->
    <group if="$(arg opencv_rrt)">
      <node pkg="rrt_exploration" type="frontier_opencv_detector.py" name="frontier_opencv_detector" respawn="true">
        <param name="map_topic" value="global_map"/>
        <remap from="/detected_points" to="/$(arg env_ns)/detected_points"/>
      </node>
    </group>
  </group>
</group>

</launch>
